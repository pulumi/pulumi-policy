// Copyright 2016-2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { strict as assert } from "assert";

import * as analyzerproto from "@pulumi/pulumi/proto/analyzer_pb";

import {
    makeAnalyzeResponse,
    makeAnalyzerInfo,
    makeRemediateResponse,
    mapEnforcementLevel,
    normalizeConfig,
} from "../protoutil";

//
// This collection of tests exists as an insurance policy against the untyped JS code generated by
// the analyzer PB definitions. Our goal here is basically to make sure that we're not calling the
// wrong functions/methods when we're serializing the PB structs, as this causes a very bad user
// experience (among other things, malformatted PB messages and exceptions in serialization can
// cause gRPC to hang for a long time with no indication there was an error).
//

describe("mapEnforcementLevel", () => {
    it("works, basically", () => {
        assert.equal(
            mapEnforcementLevel("advisory"),
            analyzerproto.EnforcementLevel.ADVISORY,
        );
        assert.equal(
            mapEnforcementLevel("mandatory"),
            analyzerproto.EnforcementLevel.MANDATORY,
        );
        assert.equal(
            mapEnforcementLevel("remediate"),
            analyzerproto.EnforcementLevel.REMEDIATE,
        );
        assert.equal(
            mapEnforcementLevel("disabled"),
            analyzerproto.EnforcementLevel.DISABLED,
        );
        assert.throws(() => mapEnforcementLevel(<any>"invalidEnforcementLevel"));
    });
});

describe("makeAnalyzerInfo", () => {
    it("creates basic AnalyzerInfo with empty policies", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [] });

        assert.equal(result.getName(), "testRules");
        assert.equal(result.getVersion(), "1.0.0");
        assert.equal(result.getSupportsconfig(), true);
        assert.equal(result.getPoliciesList().length, 0);
        assert.equal(result.getDisplayname(), "");
        assert.equal(result.getDescription(), "");
        assert.equal(result.getReadme(), "");
        assert.equal(result.getProvider(), "");
        assert.equal(result.getTagsList().length, 0);
        assert.equal(result.getRepository(), "");
    });

    it("sets optional PolicyPackArgs fields correctly", () => {
        const result = makeAnalyzerInfo("testPack", "2.0.0", "mandatory", {
            policies: [],
            displayName: "Test Policy Pack",
            description: "A test policy pack for testing",
            readme: "# Test Policy Pack\nThis is a test.",
            provider: "test-provider",
            tags: ["security", "compliance"],
            repository: "https://github.com/test/test-pack",
        });

        assert.equal(result.getName(), "testPack");
        assert.equal(result.getVersion(), "2.0.0");
        assert.equal(result.getDisplayname(), "Test Policy Pack");
        assert.equal(result.getDescription(), "A test policy pack for testing");
        assert.equal(result.getReadme(), "# Test Policy Pack\nThis is a test.");
        assert.equal(result.getProvider(), "test-provider");
        assert.deepEqual(result.getTagsList(), ["security", "compliance"]);
        assert.equal(result.getRepository(), "https://github.com/test/test-pack");
    });

    it("creates PolicyInfo for resource policy", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", {
            policies: [{
                name: "resource-policy",
                description: "A resource policy",
                enforcementLevel: "mandatory",
                validateResource: (_args, _reportViolation) => { return; },
            }],
        });

        const policies = result.getPoliciesList();
        assert.equal(policies.length, 1);

        const policy = policies[0];
        assert.equal(policy.getName(), "resource-policy");
        assert.equal(policy.getDescription(), "A resource policy");
        assert.equal(policy.getEnforcementlevel(), analyzerproto.EnforcementLevel.MANDATORY);
        assert.equal(policy.getPolicyType(), analyzerproto.PolicyType.POLICY_TYPE_RESOURCE);
    });

    it("creates PolicyInfo for stack policy", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", {
            policies: [{
                name: "stack-policy",
                description: "A stack policy",
                enforcementLevel: "remediate",
                validateStack: (_args, _reportViolation) => { return; },
            }],
        });

        const policies = result.getPoliciesList();
        assert.equal(policies.length, 1);

        const policy = policies[0];
        assert.equal(policy.getName(), "stack-policy");
        assert.equal(policy.getDescription(), "A stack policy");
        assert.equal(policy.getEnforcementlevel(), analyzerproto.EnforcementLevel.REMEDIATE);
        assert.equal(policy.getPolicyType(), analyzerproto.PolicyType.POLICY_TYPE_STACK);
    });

    it("uses pack-level enforcement level when policy level is not specified", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "disabled", {
            policies: [{
                name: "policy-without-enforcement",
                description: "A policy without enforcement level",
                validateResource: (_args, _reportViolation) => { return; },
            }],
        });

        const policies = result.getPoliciesList();
        assert.equal(policies.length, 1);

        const policy = policies[0];
        assert.equal(policy.getEnforcementlevel(), analyzerproto.EnforcementLevel.DISABLED);
    });

    it("sets policy config schema correctly", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", {
            policies: [{
                name: "configurable-policy",
                description: "A configurable policy",
                enforcementLevel: "mandatory",
                configSchema: {
                    properties: {
                        maxSize: { type: "number", default: 100 },
                        allowedRegions: { type: "array", items: { type: "string" } },
                    },
                    required: ["maxSize"],
                },
                validateResource: (_args, _reportViolation) => { return; },
            }],
        });

        const policies = result.getPoliciesList();
        assert.equal(policies.length, 1);

        const policy = policies[0];
        const configSchema = policy.getConfigschema();

        assert(configSchema, "Config schema should be present");
        assert.deepEqual(configSchema.getRequiredList(), ["maxSize"]);

        const properties = configSchema.getProperties();
        assert(properties, "Properties should be present");

        const propertiesObj = properties.toJavaScript();
        assert.deepEqual(propertiesObj.maxSize, { type: "number", default: 100 });
        assert.deepEqual(propertiesObj.allowedRegions, { type: "array", items: { type: "string" } });
    });

    it("sets optional policy fields correctly", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", {
            policies: [{
                name: "full-featured-policy",
                description: "A policy with all optional fields",
                enforcementLevel: "mandatory",
                displayName: "Full Featured Policy",
                severity: "high",
                framework: {
                    name: "CIS",
                    version: "1.4",
                    reference: "CIS-1.4.1",
                    specification: "CIS Benchmark for AWS",
                },
                tags: ["security", "cis"],
                remediationSteps: "Fix the configuration manually",
                url: "https://example.com/policy-docs",
                validateResource: (_args, _reportViolation) => { return; },
            }],
        });

        const policies = result.getPoliciesList();
        const policy = policies[0];

        assert.equal(policy.getDisplayname(), "Full Featured Policy");
        assert.equal(policy.getSeverity(), analyzerproto.PolicySeverity.POLICY_SEVERITY_HIGH);
        assert.deepEqual(policy.getTagsList(), ["security", "cis"]);
        assert.equal(policy.getRemediationSteps(), "Fix the configuration manually");
        assert.equal(policy.getUrl(), "https://example.com/policy-docs");

        const framework = policy.getFramework();
        assert(framework, "Framework should be present");
        assert.equal(framework.getName(), "CIS");
        assert.equal(framework.getVersion(), "1.4");
        assert.equal(framework.getReference(), "CIS-1.4.1");
        assert.equal(framework.getSpecification(), "CIS Benchmark for AWS");
    });

    it("processes initial config correctly", () => {
        const initialConfig: any = {
            "policy1": "advisory",
            "policy2": {
                enforcementLevel: "mandatory",
                maxRetries: 3,
                timeout: 30,
            },
            "policy3": {
                region: "us-west-2",
            },
        };

        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [] }, initialConfig);

        const configMap = result.getInitialconfigMap();
        assert(configMap, "Config map should be present");

        const policy1Config = configMap.get("policy1");
        assert(policy1Config, "Policy1 config should be present");
        assert.equal(policy1Config.getEnforcementlevel(), analyzerproto.EnforcementLevel.ADVISORY);
        assert.equal(policy1Config.hasProperties(), false);

        const policy2Config = configMap.get("policy2");
        assert(policy2Config, "Policy2 config should be present");
        assert.equal(policy2Config.getEnforcementlevel(), analyzerproto.EnforcementLevel.MANDATORY);
        const policy2Props = policy2Config.getProperties();
        assert(policy2Props, "Policy2 properties should be present");
        const policy2PropsObj = policy2Props.toJavaScript();
        assert.equal(policy2PropsObj.maxRetries, 3);
        assert.equal(policy2PropsObj.timeout, 30);

        const policy3Config = configMap.get("policy3");
        assert(policy3Config, "Policy3 config should be present");
        assert.equal(policy3Config.getEnforcementlevel(), analyzerproto.EnforcementLevel.ADVISORY);
        const policy3Props = policy3Config.getProperties();
        assert(policy3Props, "Policy3 properties should be present");
        const policy3PropsObj = policy3Props.toJavaScript();
        assert.equal(policy3PropsObj.region, "us-west-2");
    });

    it("handles multiple policies with different enforcement levels", () => {
        const result = makeAnalyzerInfo("testRules", "1.0.0", "advisory", {
            policies: [
                {
                    name: "advisory-policy",
                    description: "Advisory policy",
                    enforcementLevel: "advisory",
                    validateResource: (_args, _reportViolation) => { return; },
                },
                {
                    name: "mandatory-policy",
                    description: "Mandatory policy",
                    enforcementLevel: "mandatory",
                    validateStack: (_args, _reportViolation) => { return; },
                },
                {
                    name: "disabled-policy",
                    description: "Disabled policy",
                    enforcementLevel: "disabled",
                    validateResource: (_args, _reportViolation) => { return; },
                },
                {
                    name: "remediate-policy",
                    description: "Remediate policy",
                    enforcementLevel: "remediate",
                    validateResource: (_args, _reportViolation) => { return; },
                    remediateResource: (_args) => { return; },
                },
            ],
        });

        const policies = result.getPoliciesList();
        assert.equal(policies.length, 4);

        assert.equal(policies[0].getName(), "advisory-policy");
        assert.equal(policies[0].getEnforcementlevel(), analyzerproto.EnforcementLevel.ADVISORY);
        assert.equal(policies[0].getPolicyType(), analyzerproto.PolicyType.POLICY_TYPE_RESOURCE);

        assert.equal(policies[1].getName(), "mandatory-policy");
        assert.equal(policies[1].getEnforcementlevel(), analyzerproto.EnforcementLevel.MANDATORY);
        assert.equal(policies[1].getPolicyType(), analyzerproto.PolicyType.POLICY_TYPE_STACK);

        assert.equal(policies[2].getName(), "disabled-policy");
        assert.equal(policies[2].getEnforcementlevel(), analyzerproto.EnforcementLevel.DISABLED);

        assert.equal(policies[3].getName(), "remediate-policy");
        assert.equal(policies[3].getEnforcementlevel(), analyzerproto.EnforcementLevel.REMEDIATE);
    });

    it("does not throw for reasonable policy packs", () => {
        assert.doesNotThrow(() => makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [] }));
        assert.doesNotThrow(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "mandatory",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]});
        });
        assert.doesNotThrow(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "remediate",
                    validateResource: (args, reportViolation) => { return; },
                    remediateResource: (args) => { return; },
                },
            ]});
        });
        assert.doesNotThrow(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "remediate",
                    remediateResource: (args) => { return; },
                },
            ]});
        });
        assert.doesNotThrow(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "mandatory",
                    configSchema: {
                        properties: {
                            foo: { type: "string" },
                        },
                    },
                    validateResource: (args, reportViolation) => { return; },
                },
            ]});
        });
        assert.doesNotThrow(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: "disabled",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]});
        });
    });

    it("throws for invalid enforcementLevel", () => {
        assert.throws(() => {
            makeAnalyzerInfo("testRules", "1.0.0", "advisory", { policies: [
                {
                    name: "approved-amis-by-id",
                    description: "Instances should use approved AMIs",
                    enforcementLevel: <any>"invalidEnforcementLevel",
                    validateResource: (args, reportViolation) => { return; },
                },
            ]});
        });
    });
});

describe("makeAnalyzeResponse", () => {
    it("does not throw for reasonable diagnostic responses", () => {
        assert.doesNotThrow(() => {
            makeAnalyzeResponse([]);
        });
        assert.doesNotThrow(() => {
            makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "mandatory",
                },
            ]);
        });
        assert.doesNotThrow(() => {
            makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "mandatory",
                    urn: "foo",
                },
            ]);
        });
        assert.doesNotThrow(() => {
            makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: "disabled",
                },
            ]);
        });
    });

    it("throws for invalid enforcementLevel", () => {
        assert.throws(() => {
            makeAnalyzeResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    message: "Did not use approved AMI",
                    enforcementLevel: <any>"invalidEnforcementLevel",
                },
            ]);
        });
    });
});

describe("makeRemediateResponse", () => {
    it("does not throw for reasonable remediation responses", () => {
        assert.doesNotThrow(() => {
            makeRemediateResponse([]);
        });
        assert.doesNotThrow(() => {
            makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    properties: {
                        "foo": "bar",
                        "zed": 33,
                        "zap": [ 99, 66, 11 ],
                    },
                },
            ]);
        });
        assert.doesNotThrow(() => {
            makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                    diagnostic: "A warning was issued; remediate not performed.",
                },
            ]);
        });
    });

    it("throws for missing properties OR diagnostic", () => {
        assert.throws(() => {
            makeRemediateResponse([
                {
                    policyName: "approved-amis-by-id",
                    policyPackName: "awsSecRules",
                    policyPackVersion: "1.0.0",
                    description: "Instances should use approved AMIs",
                },
            ]);
        });
    });
});

describe("normalizeConfig", () => {
    it("works as expected", () => {
        const tests: any[] = [
            {
                config: {},
                expected: {},
            },
            {
                config: { policy: "advisory" },
                expected: { policy: { enforcementLevel: "advisory" } },
            },
            {
                config: { policy: { enforcementLevel: "advisory" } },
                expected: { policy: { enforcementLevel: "advisory" } },
            },
            {
                config: { policy: { foo: "bar" } },
                expected: { policy: { properties: { foo: "bar" } } },
            },
            {
                config: { policy: { enforcementLevel: "advisory", foo: "bar" } },
                expected: { policy: { enforcementLevel: "advisory", properties: { foo: "bar" } } },
            },
        ];

        for (const test of tests) {
            assert.deepEqual(normalizeConfig(test.config), test.expected);
        }
    });
});
